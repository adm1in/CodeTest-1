from ClassCongregation import _urlparse,PocType_,verify
from requests_toolbelt.utils import dump
from operator import methodcaller
import prettytable as pt
import requests,re

CMD = verify.CMD
VULN = verify.VULN
TIMEOUT = verify.TIMEOUT
#from ClassCongregation import Dnslog#通过Dnslog判断
#DL = Dnslog() #申请dnslog地址
#DL.dns_host() #返回dnslog地址
#DL.result()   #判断
class {{service.entry_nodes.vulname}}():
    def __init__(self, url, CMD):
        self.url = url
        self.CMD = CMD
            
    def {{service.entry_nodes.cvename}}(self):
        self.pocname = '{{service.entry_nodes.vulname}} : {{service.entry_nodes.cvename}}'
        self.method = '{{service.header_nodes.headinfo.method}}'
        self.rawdata = 'null'
        self.info = '{{service.entry_nodes.infoname}}'
        self.r = "PoCWating"

        self.path = '{{service.header_nodes.headinfo.path}}'
        self.data = '{{service.header_nodes.content.data}}'
        self.headers = {{service.header_nodes.headinfo.header}}
        try:
            if VULN == 'False':
                self.request = requests.{{service.header_nodes.headinfo.method}}(self.url + self.path, data=self.data, headers=self.headers, timeout=TIMEOUT, verify=False)
                self.rawdata = dump.dump_all(self.request).decode('utf-8','ignore')
                {{service.entry_nodes.condition}}
                    self.r = 'PoCSuCCeSS'
                    verify.generic_output(self.r, self.pocname, self.method, self.rawdata, self.info)
                else:
                    verify.generic_output(self.request.text, self.pocname, self.method, self.rawdata, self.info)
            else:
                self.request = requests.{{service.header_nodes.headinfo.method}}(self.url + self.path, data=self.data, headers=self.headers, timeout=TIMEOUT, verify=False)
                verify.generic_output(self.request.text, self.pocname, self.method, self.rawdata, self.info)
        except requests.exceptions.Timeout as error:
            verify.timeout_output(self.pocname)
        except requests.exceptions.ConnectionError as error:
            verify.connection_output(self.pocname)
        except Exception as error:
            verify.generic_output(str(error), self.pocname, self.method, self.rawdata, self.info)

tb = pt.PrettyTable()
tb.field_names = ['Target type', 'Vuln Name', 'Poc', 'Exp', 'Impact Version && Vulnerability description']
tb.align['Target type'] = 'l'
tb.align['Vuln Name'] = 'l'
tb.align['Impact Version && Vulnerability description'] = 'l'
tb.add_row(["{{service.entry_nodes.cmsname}}", "{{service.entry_nodes.cvename}}" ,"N" ,"Y" ,"{{service.entry_nodes.banner}}, {{service.entry_nodes.infoname}}"])
print(tb)

def check(**kwargs):
    Exp{{service.entry_nodes.vulname}} = {{service.entry_nodes.vulname}}(_urlparse(kwargs['url']),CMD)
    if kwargs['pocname'] != 'ALL':
        func = getattr(Exp{{service.entry_nodes.vulname}}, kwargs['pocname'])#返回对象函数属性值，可以直接调用
        func()#调用函数
    else:#调用所有函数
        for func in dir({{service.entry_nodes.vulname}}):
            if not func.startswith("__"):
                methodcaller(func)(Exp{{service.entry_nodes.vulname}})
